import mongoose from 'mongoose';

// Configura√ß√µes espec√≠ficas do MongoDB
export const mongoConfig = {
  // Configura√ß√µes de conex√£o
  connectionOptions: {
    maxPoolSize: 10, // Manter at√© 10 conex√µes socket
    serverSelectionTimeoutMS: 5000, // Manter tentando enviar opera√ß√µes por 5 segundos
    socketTimeoutMS: 45000, // Fechar sockets ap√≥s 45 segundos de inatividade
    bufferCommands: false, // Desabilitar buffering de comandos do mongoose
    bufferMaxEntries: 0, // Desabilitar buffering de comandos
  }
};

// Fun√ß√£o para verificar conex√£o
export async function checkConnection() {
  try {
    const state = mongoose.connection.readyState;
    const states = {
      0: 'Desconectado',
      1: 'Conectado',
      2: 'Conectando',
      3: 'Desconectando'
    };
    
    console.log(`üìä Status da conex√£o MongoDB: ${states[state as keyof typeof states]}`);
    
    if (state === 1) {
      const collections = await mongoose.connection.db.listCollections().toArray();
      console.log(`üìö Cole√ß√µes encontradas: ${collections.length}`);
      
      // Estat√≠sticas b√°sicas
      const { User, Template, Page, Analytics } = await import('@/models');
      
      const userCount = await User.countDocuments();
      const templateCount = await Template.countDocuments();
      const pageCount = await Page.countDocuments();
      const analyticsCount = await Analytics.countDocuments();
      
      console.log(`üë• Usu√°rios: ${userCount}`);
      console.log(`üìÑ Templates: ${templateCount}`);
      console.log(`üìù P√°ginas: ${pageCount}`);
      console.log(`üìä Analytics: ${analyticsCount}`);
    }
    
    return state === 1;
  } catch (error) {
    console.error('‚ùå Erro ao verificar conex√£o:', error);
    return false;
  }
}

// Fun√ß√£o para limpar dados de teste (apenas desenvolvimento)
export async function clearTestData() {
  if (process.env.NODE_ENV === 'production') {
    throw new Error('N√£o √© poss√≠vel limpar dados em produ√ß√£o!');
  }
  
  try {
    const { User, Template, Page, FileUpload, Analytics, AuditLog } = await import('@/models');
    
    await Promise.all([
      User.deleteMany({ email: { $ne: 'admin@sexyflow.com' } }),
      Page.deleteMany({}),
      FileUpload.deleteMany({}),
      Analytics.deleteMany({}),
      AuditLog.deleteMany({})
    ]);
    
    console.log('üßπ Dados de teste removidos com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados:', error);
  }
}